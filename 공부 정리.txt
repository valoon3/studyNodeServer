
< node 교과서 >

= 단방향 암호화 =
1. 한번 암호화된 내용을 다시 복호화할 수 없다.
2. 단방향 암호화는 복호화가 불가능하기 때문에 해시 함수라고 불르기도 한다.

= 양방향 암호화 =
1. 암호화된 문자열을 복호할 수 있다.

= event =
readStream에서 보통 error, data, end 이벤트를 사용한다.
파일을 읽는도중 error가 발생하면 error
파일 읽기가 성공하면 data 이벤트가 실행된다.
파일을 다 읽으면 end 이벤트가 실행된다.

== cookie ==
1. createServer의 메서드는 req 객체에 담겨있는 cookie를 가져옵니다.
2. 쿠키는 req.headers.cookie 에 들어있다.
3. req.headers 는 요청의 헤더를 의미한다.
+ 4. req.url 은 path와 search 부분을 알린다.

== npm package manager ==

1. on(이벤트명, 콜백) : 이벤트 이름과 이벤트 발생시 일어나는 콜백을 연결한다.
    - data라는 이벤트와 on라는 이벤트가 발생할 때 콜백 함수를 호출하도록 이벤트를 등혹하는 과정
2. addListener : on과 같다.
3. emit(이벤트명) : 이벤트를 호출하는 메서드, 이벤트 이름을 넣으면 미리 등록해둔 콜백이 실행된다.
4. once(이벤트명, 콜백) : 한번만 실행되는 메서드, 한번 실행되면 이후 삭제된다.
5. removeAllListeners(이벤트명) : 이벤트에 연결된 모든 모든 이벤트 리스너를 삭제한다.

== node.js http 구현 관련 내용 == 서버 모르는 내용 있을때 꼭 참고하자 == !!! 중요
https://nodejs.org/ko/docs/guides/anatomy-of-an-http-transaction/

1. 요청과 응답 이해하기
 1) res 객체에는 writeHead, write, end 메서드가 있다.
 2) res.writeHead : 응답에 대한 정보를 기록하는 메서드이다.
    - res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    - 첫번째 인수는 응답에대한 결과.
    - 두 번째 인수로 응답에 대한 정보를 보낸다.
 3) res.write : html 모양의 문자열을 보내거나 버퍼를 보낼 수 있다.
    - 여러번 호출해서 데이터를 여러 개 보내도 된다.
    - 데이터가 기록되는 부분을 Body 라고 한다.
 4) res.end : 응답을 종료하는 메서드
    - 만약 인수가 있다면 그 데이터도 클라이언트로 보내고 응답을 종료한다.

2. REST와 라우팅 사용하기
 1) 주소는 의미를 명확히 전달하기 위해 명사로 구성된다.
 2) GET : 서버 자원을 가져오고자 할 때 사용한다.
    - 데이터를 서버로 보내야 한다면 쿼리스트링을 사용한다.
 3) POST : 서버에 자원을 새로 등록하고자 할 때 사용한다.
    - 요청 본문에 새로 등록할 데이터를 넣어 보낸다.
 4) PUT : 서버의 자원을 요청에 들어 있는 자원으로 치환하고자 할 때 사용한다.
    - 요청의 본문에 치환할 데이터를 넣어 보낸다.
 5) PATCH : 서버 자원의 일부만 수정하고자 할 때 사용한다.
    - 요청 본문에 일부 수정할 데이터를 넣어 보낸다.
 6) DELETE : 서버의 자원을 삭제할 때 사용한다.
    - 요청의 본문에 데이터를 넣지 않는다.
 7) OPTION : 요청을 하기 전에 통신 옵션을 설명하기 위해 사용한다.

 8) GET 의 경우에는 브라우저에서 캐싱(기억)할 수도 있으므로 같은 주소로 GET 요청을 할 때 서버에서 가져오는 것이 아니라 캐시에서 가져올 수도 있다.


 == express ==
 1. app.set(키, 값) 을 사용해서 데이터를 저장한다.
 2. app.get(키) app.set으로 저장한 내용을 가져온다.
 3. app.get(주소, 라우터) : 주소에 대한 어떠한 요청이 들어올 때 어떤 동작을 할지 정의합니다.
 4. app.use() : 미들웨어를 사용할 때는 app.use를 사용한다.
    -